#DATA TYPES
#
#None
#Numeric
#List
#Tuple
#Set
#String
#Range
#Dictionary(Map)

#None = null

#Numeric has int, float, complex and bool
a = 22
type(a)
<class 'int'>
b=22.456
type(b)
<class 'float'>
c=6-4j
#x=a+bi  but we use j instead of i where j represents square root of -1
type(c)
<class 'complex'>


#converting of numeric data types
x=float(a)
x
22.0
y=int(b)
y
22
z=complex(x,y)
z
(22+22j)

#bool
boolean = a>b
bool(boolean)
False
k=bool(boolean)
k
False
int(k)
0
a<b
True
int(_)
1


#Tuple
#Set
#List
#Range
#String

## All the above comes under the sequence
#Sequence is a generic refers to a collection of items

tup = (11,22,33,44,22,33)
tup
(11, 22, 33, 44, 22, 33)
type(tup)
<class 'tuple'>
s1 = [1,2,3,4,5,3,4]
s1
[1, 2, 3, 4, 5, 3, 4]
type(s1)
<class 'list'>
ls = {11,22,33,33,22}
ls
{33, 11, 22}
type(ls)
<class 'set'>
m=range(1,10)
m
range(1, 10)
list(range(1,10))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
#range have 3 parameters
#(start,stop,step)
list(range(2,23,3))
[2, 5, 8, 11, 14, 17, 20]
#prints the numbers with a difference of 3 starting from 2 ending at the 22

#Dictionary
#to store large amount of data with "key and pair" values where key should be unique

d = {'pranay':'samsung','naidu':'iphone','preethi':'iqoo','revanth':'redmi'}
d
{'pranay': 'samsung', 'naidu': 'iphone', 'preethi': 'iqoo', 'revanth': 'redmi'}
d['pranay']
'samsung'
d.get('naidu')
'iphone'
# to fetch the values using keys